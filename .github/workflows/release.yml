name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Application version (used for tag/release, e.g. 1.2.3)"
        required: true
      chart_version:
        description: "Expected Helm chart version (default: read from Chart.yaml)"
        required: false

permissions:
  contents: write
  packages: write

env:
  CHART_DIR: charts/provenance
  CHART_NAME: provenance
  OCI_REGISTRY: ghcr.io/${{ github.repository_owner }}/charts

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (uv)
        uses: astral-sh/setup-uv@v1

      - name: Sync Python dependencies
        run: uv sync --extra dev --extra dashboard --extra warehouse --extra client

      - name: Run tests
        run: uv run -- pytest

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Install yq
        run: |
          YQ_VERSION=v4.44.3
          sudo wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Validate chart version
        run: |
          CHART_VERSION=$(yq '.version' $CHART_DIR/Chart.yaml)
          EXPECTED="${{ inputs.chart_version }}"
          if [ -n "$EXPECTED" ] && [ "$EXPECTED" != "$CHART_VERSION" ]; then
            echo "Chart version mismatch. Expected $EXPECTED, found $CHART_VERSION"
            exit 1
          fi
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_ENV

      - name: Helm lint
        run: make helm-lint

      - name: Helm template
        run: make helm-template

      - name: Package chart
        run: |
          mkdir -p dist/charts
          helm package $CHART_DIR --destination dist/charts

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push chart to OCI
        run: |
          CHART_PACKAGE="dist/charts/${CHART_NAME}-${CHART_VERSION}.tgz"
          helm push "$CHART_PACKAGE" oci://$OCI_REGISTRY

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ inputs.version }}
          release_name: v${{ inputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Upload chart artifact to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/charts/${{ env.CHART_NAME }}-${{ env.CHART_VERSION }}.tgz
          asset_name: ${{ env.CHART_NAME }}-${{ env.CHART_VERSION }}.tgz
          asset_content_type: application/gzip
